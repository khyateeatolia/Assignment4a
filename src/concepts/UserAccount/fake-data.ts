// src/concepts/UserAccount/fake-data.ts

// Mappings for the MockSSOValidationService to simulate valid/invalid SSO tokens
export const fakeSsoMappings = {
  // Valid SSO tokens for registration/login
  "Google_valid_token_alice": "alice@example.com",
  "Google_valid_token_bob": "bob@example.com",
  "GitHub_valid_token_charlie": "charlie@github.com",
  "UniversityA_valid_token_diana": "diana@universitya.edu",
  "UniversityB_valid_token_eve": "eve@universityb.edu",
  "Google_valid_token_frank": "frank@example.com", // For password management tests
  "Google_valid_token_grace": "grace@example.com", // For account deletion tests

  // Invalid SSO tokens (will result in `null` from `validateToken`)
  "Google_invalid_token": null,
  "GitHub_expired_token": null,
};

// Various user profiles and related data for test scenarios
export const fakeUsers = {
  alice: {
    email: "alice@example.com",
    username: "alice_sso_user", // Username, might be autogenerated or provided by SSO
    ssoProvider: "Google",
    ssoToken: "valid_token_alice",
    ipAddress: "192.168.1.1",
    userAgent: "Chrome/Deno",
    newAvatar: "https://example.com/avatars/alice_new.jpg",
    newBio: "Alice is a digital explorer, fascinated by Deno and MongoDB.",
    longBio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. This bio is intentionally made longer than the `bioMaxLength` defined in `mockUserAccountConfig` to test the `BioTooLongError`.",
  },
  bob: {
    email: "bob@example.com",
    username: "bob_session_tester",
    ssoProvider: "Google",
    ssoToken: "valid_token_bob",
    ipAddress: "192.168.1.2",
    userAgent: "Firefox/Deno",
  },
  charlie: {
    email: "charlie@github.com",
    username: "charlie_hybrid_auth",
    ssoProvider: "GitHub",
    ssoToken: "valid_token_charlie",
    ipAddress: "192.168.1.3",
    userAgent: "Safari/Deno",
    initialPassword: "OldStrongPassword123!", // For hybrid auth with local password
    newPassword: "NewSuperSecurePassword456@",
    tooShortPassword: "short", // To test PasswordTooShortError
    wrongPassword: "IncorrectPassword!", // To test InvalidCredentialsError
    newAvatar: "https://example.com/avatars/charlie_avatar.png",
    newBio: "Charlie, a developer who loves open-source contributions and secure systems.",
    longBio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. This bio is intentionally made longer than the `bioMaxLength` defined in `mockUserAccountConfig` to test the `BioTooLongError`.",
  },
  diana: {
    email: "diana@universitya.edu",
    username: "diana_account_lifecycle",
    ssoProvider: "UniversityA",
    ssoToken: "valid_token_diana",
    ipAddress: "192.168.1.4",
    userAgent: "Edge/Deno",
    initialAvatar: "https://example.com/avatars/diana_initial.webp",
    initialBio: "Diana is an aspiring data scientist specializing in astrophysics.",
  },
  frank: {
    email: "frank@example.com",
    username: "frank_password_user",
    ssoProvider: "Google",
    ssoToken: "valid_token_frank",
    ipAddress: "192.168.1.5",
    userAgent: "Opera/Deno",
    initialPassword: "FrankPassword123",
    newPassword: "FrankNewPassword456!",
    tooShortPassword: "short", // To test PasswordTooShortError
    wrongPassword: "WrongPassword999",
  },
  grace: {
    email: "grace@example.com",
    username: "grace_deleter",
    ssoProvider: "Google",
    ssoToken: "valid_token_grace",
    ipAddress: "192.168.1.6",
    userAgent: "Brave/Deno",
  },
  nonExistent: {
    email: "nonexistent@example.com",
    username: "nonexistent_user",
    ssoProvider: "Google",
    ssoToken: "non_existent_token", // No mapping, so `validateToken` returns null
    ipAddress: "10.0.0.1",
    userAgent: "Test/Deno",
  },
  invalidSso: {
    email: "invalid@sso.com",
    username: "invalid_sso_user",
    ssoProvider: "Google",
    ssoToken: "invalid_token", // Explicitly mapped to null in fakeSsoMappings
    ipAddress: "10.0.0.2",
    userAgent: "Bad/Deno",
  },
  // Placeholder for a user whose derived/attempted username might conflict,
  // if `register_or_login` could throw `UsernameTakenError`.
  // As discussed, this depends on `UserAccountConcept`'s specific username handling.
  duplicateUsernameCandidate: {
    email: "duplicate@example.com",
    username: "alice_sso_user", // Aims for same username as Alice
    ssoProvider: "GitHub",
    ssoToken: "github_token_duplicate_user",
    ipAddress: "192.168.1.7",
    userAgent: "Safari/macOS",
  },
};

// Fake session IDs for testing non-existent/invalid sessions (these are just example strings,
// real ObjectIds will be created dynamically)
export const fakeSessionIds = {
  nonExistent: "60c72b2f9b1e8a001c8c4c7a", // Example ObjectId-like string
  malformed: "not-a-valid-objectid",
};
